from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from database import create_tariff
from filters.admin import IsAdminFilter

from ..panel.keyboard import AdminPanelCallback
from .keyboard import (
    AdminTariffCallback,
    build_cancel_kb,
    build_edit_tariff_fields_kb,
    build_single_tariff_kb,
    build_tariff_groups_kb,
    build_tariff_list_kb,
    build_tariff_menu_kb,
)


router = Router()


class TariffCreateState(StatesGroup):
    group = State()
    name = State()
    duration = State()
    price = State()
    traffic = State()
    confirm_more = State()
    device_limit = State()


class TariffEditState(StatesGroup):
    choosing_field = State()
    editing_value = State()


@router.callback_query(AdminPanelCallback.filter(F.action == "tariffs"), IsAdminFilter())
async def handle_tariff_menu(callback_query: CallbackQuery):
    text = (
        "<b>üí∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ü–µ–Ω–∞, –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞)\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã"
    )
    await callback_query.message.edit_text(text=text, reply_markup=build_tariff_menu_kb())


@router.callback_query(AdminTariffCallback.filter(F.action == "create"), IsAdminFilter())
async def start_tariff_creation(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TariffCreateState.group)
    await callback.message.edit_text(
        "üìÅ –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥ –≥—Ä—É–ø–ø—ã</b>, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>basic</code>, <code>vip</code>, <code>business</code>",
        reply_markup=build_cancel_kb(),
    )


@router.message(TariffCreateState.group, IsAdminFilter())
async def process_tariff_group(message: Message, state: FSMContext):
    group_code = message.text.strip().lower()
    await state.update_data(group_code=group_code)
    await state.set_state(TariffCreateState.name)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>30 –¥–Ω–µ–π</i> –∏–ª–∏ <i>1 –º–µ—Å—è—Ü</i>\n\n"
        "<i>–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞</i>",
        reply_markup=build_cancel_kb(),
    )


@router.message(TariffCreateState.name, IsAdminFilter())
async def process_tariff_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(TariffCreateState.duration)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ <b>–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞ –≤ –¥–Ω—è—Ö</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>30</i>):", reply_markup=build_cancel_kb()
    )


@router.message(TariffCreateState.duration, IsAdminFilter())
async def process_tariff_duration(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):")
        return

    await state.update_data(duration_days=days)
    await state.set_state(TariffCreateState.price)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>150</i>)\n\n"
        "<i>–ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞</i>",
        reply_markup=build_cancel_kb(),
    )


@router.message(TariffCreateState.price, IsAdminFilter())
async def process_tariff_price(message: Message, state: FSMContext):
    try:
        price = int(message.text.strip())
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ):")
        return

    await state.update_data(price_rub=price)
    await state.set_state(TariffCreateState.traffic)
    await message.answer(
        "üì¶ –í–≤–µ–¥–∏—Ç–µ <b>–ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ì–ë</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>100</i>, 0 ‚Äî –±–µ–∑–ª–∏–º–∏—Ç):", reply_markup=build_cancel_kb()
    )


@router.message(TariffCreateState.traffic, IsAdminFilter())
async def process_tariff_traffic(message: Message, state: FSMContext):
    try:
        traffic = int(message.text.strip())
        if traffic < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ):")
        return

    await state.update_data(traffic_limit=traffic * 1024**3 if traffic > 0 else None)
    await state.set_state(TariffCreateState.device_limit)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ <b>–ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (HWID)</b> –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>3</i>, 0 ‚Äî –±–µ–∑–ª–∏–º–∏—Ç):",
        reply_markup=build_cancel_kb(),
    )


@router.message(TariffCreateState.device_limit, IsAdminFilter())
async def process_tariff_device_limit(message: Message, state: FSMContext, session):
    try:
        device_limit = int(message.text.strip())
        if device_limit < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 0 –∏–ª–∏ –±–æ–ª—å—à–µ):")
        return

    data = await state.get_data()

    new_tariff = await create_tariff(
        session,
        {
            "name": data["name"],
            "group_code": data["group_code"],
            "duration_days": data["duration_days"],
            "price_rub": data["price_rub"],
            "traffic_limit": data["traffic_limit"],
            "device_limit": device_limit if device_limit > 0 else None,
        },
    )

    await state.set_state(TariffCreateState.confirm_more)
    await message.answer(
        f"‚úÖ –¢–∞—Ä–∏—Ñ <b>{new_tariff['name']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É <code>{data['group_code']}</code>.\n\n"
        "‚ûï –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="add_more_tariff"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="done_tariff_group"),
                ]
            ]
        ),
    )


@router.callback_query(F.data == "add_more_tariff", IsAdminFilter())
async def handle_add_more_tariff(callback: CallbackQuery, state: FSMContext):
    await state.set_state(TariffCreateState.name)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞</b>:", reply_markup=build_cancel_kb())


@router.callback_query(F.data == "done_tariff_group", IsAdminFilter())
async def handle_done_tariff_group(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚úÖ –ì—Ä—É–ø–ø–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=build_tariff_menu_kb())


@router.callback_query(F.data == "cancel_tariff_creation", IsAdminFilter())
async def cancel_tariff_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_tariff_menu_kb())


@router.callback_query(AdminTariffCallback.filter(F.action == "list"), IsAdminFilter())
async def show_tariff_groups(callback: CallbackQuery, session):
    rows = await session.fetch(
        "SELECT DISTINCT group_code FROM tariffs WHERE group_code IS NOT NULL ORDER BY group_code"
    )
    groups = [r["group_code"] for r in rows]

    if not groups:
        await callback.message.edit_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.", reply_markup=build_tariff_menu_kb())
        return

    await callback.message.edit_text("<b>üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—É—é –≥—Ä—É–ø–ø—É:</b>", reply_markup=build_tariff_groups_kb(groups))


@router.callback_query(AdminTariffCallback.filter(F.action.startswith("group|")), IsAdminFilter())
async def show_tariffs_in_group(callback: CallbackQuery, callback_data: AdminTariffCallback, session):
    group_code = callback_data.action.split("|", 1)[1]
    rows = await session.fetch("SELECT * FROM tariffs WHERE group_code = $1 ORDER BY id", group_code)
    tariffs = [dict(r) for r in rows]

    if not tariffs:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤.")
        return

    await callback.message.edit_text(
        f"<b>üì¶ –¢–∞—Ä–∏—Ñ—ã –≥—Ä—É–ø–ø—ã: {group_code}</b>", reply_markup=build_tariff_list_kb(tariffs)
    )


@router.callback_query(AdminTariffCallback.filter(F.action.startswith("view|")), IsAdminFilter())
async def view_tariff(callback: CallbackQuery, callback_data: AdminTariffCallback, session):
    tariff_id = int(callback_data.action.split("|", 1)[1])
    tariff = await session.fetchrow("SELECT * FROM tariffs WHERE id = $1", tariff_id)

    if not tariff:
        await callback.message.edit_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    t = dict(tariff)
    traffic_text = f"{t['traffic_limit'] // 1024**3} –ì–ë" if t["traffic_limit"] else "–ë–µ–∑–ª–∏–º–∏—Ç"
    device_text = f"{t['device_limit']}" if t["device_limit"] is not None else "–ë–µ–∑–ª–∏–º–∏—Ç"

    text = (
        f"<b>üìÑ –¢–∞—Ä–∏—Ñ: {t['name']}</b>\n\n"
        f"üìÅ –ì—Ä—É–ø–ø–∞: <code>{t['group_code']}</code>\n"
        f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{t['duration_days']} –¥–Ω–µ–π</b>\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{t['price_rub']}‚ÇΩ</b>\n"
        f"üì¶ –¢—Ä–∞—Ñ–∏–∫: <b>{traffic_text}</b>\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: <b>{device_text}</b>\n"
        f"{'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if t['is_active'] else '‚õî –û—Ç–∫–ª—é—á–µ–Ω'}"
    )

    await callback.message.edit_text(text, reply_markup=build_single_tariff_kb(tariff_id))


@router.callback_query(AdminTariffCallback.filter(F.action.startswith("delete|")), IsAdminFilter())
async def confirm_tariff_deletion(callback: CallbackQuery, callback_data: AdminTariffCallback):
    tariff_id = int(callback_data.action.split("|", 1)[1])
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>—É–¥–∞–ª–∏—Ç—å</b> —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_tariff|{tariff_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view|{tariff_id}"),
                ]
            ]
        ),
    )


@router.callback_query(F.data.startswith("confirm_delete_tariff|"), IsAdminFilter())
async def delete_tariff(callback: CallbackQuery, session):
    tariff_id = int(callback.data.split("|", 1)[1])
    await session.execute("UPDATE keys SET tariff_id = NULL WHERE tariff_id = $1", tariff_id)
    await session.execute("DELETE FROM tariffs WHERE id = $1", tariff_id)
    await callback.message.edit_text("üóë –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=build_tariff_menu_kb())


@router.callback_query(AdminTariffCallback.filter(F.action.startswith("edit|")), IsAdminFilter())
async def start_edit_tariff(callback: CallbackQuery, callback_data: AdminTariffCallback, state: FSMContext):
    tariff_id = int(callback_data.action.split("|")[1])
    await state.update_data(tariff_id=tariff_id)
    await state.set_state(TariffEditState.choosing_field)
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>", reply_markup=build_edit_tariff_fields_kb(tariff_id)
    )


@router.callback_query(F.data.startswith("edit_field|"), IsAdminFilter())
async def ask_new_value(callback: CallbackQuery, state: FSMContext):
    _, _tariff_id, field = callback.data.split("|")
    await state.update_data(field=field)
    await state.set_state(TariffEditState.editing_value)

    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞",
        "duration_days": "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö",
        "price_rub": "—Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö",
        "traffic_limit": "–ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ì–ë (0 ‚Äî –±–µ–∑–ª–∏–º–∏—Ç)",
        "device_limit": "–ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (0 ‚Äî –±–µ–∑–ª–∏–º–∏—Ç)",
    }

    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <b>{field_names.get(field, field)}</b>:", reply_markup=build_cancel_kb()
    )


@router.message(TariffEditState.editing_value, IsAdminFilter())
async def apply_edit(message: Message, state: FSMContext, session):
    data = await state.get_data()
    tariff_id = data["tariff_id"]
    field = data["field"]
    value = message.text.strip()

    if field in ["duration_days", "price_rub", "traffic_limit", "device_limit"]:
        try:
            num = int(value)
            if num < 0:
                raise ValueError
            if field == "traffic_limit":
                value = num * 1024**3 if num > 0 else None
            elif field == "device_limit":
                value = num if num > 0 else None
            else:
                value = num
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

    await session.execute(f"UPDATE tariffs SET {field} = $1, updated_at = NOW() WHERE id = $2", value, tariff_id)
    await state.clear()
    await message.answer("‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


@router.callback_query(F.data.startswith("toggle_active|"), IsAdminFilter())
async def toggle_tariff_status(callback: CallbackQuery, session):
    tariff_id = int(callback.data.split("|")[1])
    row = await session.fetchrow("SELECT is_active FROM tariffs WHERE id = $1", tariff_id)

    if not row:
        await callback.message.edit_text("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    new_status = not row["is_active"]
    await session.execute("UPDATE tariffs SET is_active = $1, updated_at = NOW() WHERE id = $2", new_status, tariff_id)

    status_text = "‚úÖ –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω." if new_status else "‚õî –¢–∞—Ä–∏—Ñ –æ—Ç–∫–ª—é—á—ë–Ω."
    await callback.message.edit_text(status_text)


@router.callback_query(AdminTariffCallback.filter(F.action.startswith("create|")), IsAdminFilter())
async def start_tariff_creation_existing_group(
    callback: CallbackQuery, callback_data: AdminTariffCallback, state: FSMContext
):
    group_code = callback_data.action.split("|", 1)[1]
    await state.update_data(group_code=group_code)
    await state.set_state(TariffCreateState.name)
    await callback.message.edit_text(
        f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –≤ –≥—Ä—É–ø–ø—É <code>{group_code}</code>\n\nüìù –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b>:",
        reply_markup=build_cancel_kb(),
    )
