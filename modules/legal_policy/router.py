"""
–ú–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
–≤ —Ä–∞–∑–¥–µ–ª "–û —Å–µ—Ä–≤–∏—Å–µ" –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç callback "about_vpn" –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import os
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from logger import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from .config import LegalPolicyConfig
    logger.info("[LegalPolicy] –ö–æ–Ω—Ñ–∏–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"[LegalPolicy] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
    
    # Fallback –∫–æ–Ω—Ñ–∏–≥
    class LegalPolicyConfig:
        ENABLED = True
        TERMS_OF_SERVICE_URL = "https://domain.ru/legal/terms-of-service.html"
        PRIVACY_POLICY_URL = "https://domain.ru/legal/privacy-policy.html"
        TERMS_BUTTON_TEXT = "üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"
        PRIVACY_BUTTON_TEXT = "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        USE_WEBAPP_BUTTONS = False
        BUTTONS_POSITION = "bottom"
        BUTTONS_INLINE = True
        TERMS_WEBAPP_URL = "https://domain.ru/legal/terms-of-service.html"
        PRIVACY_WEBAPP_URL = "https://domain.ru/legal/privacy-policy.html"

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
_imports_cached = False
_import_cache = {}

def _lazy_import():
    """–õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    global _imports_cached, _import_cache
    
    if _imports_cached:
        return _import_cache
    
    try:
        from database.users import get_trial
        from handlers.utils import edit_or_send_message
        from handlers.texts import get_about_vpn
        from config import (
            DONATIONS_ENABLE,
            SUPPORT_CHAT_URL, 
            CHANNEL_EXISTS,
            CHANNEL_URL,
            SHOW_START_MENU_ONCE
        )
        from handlers.buttons import SUPPORT, CHANNEL, BACK
        
        _import_cache = {
            'get_trial': get_trial,
            'edit_or_send_message': edit_or_send_message,
            'get_about_vpn': get_about_vpn,
            'DONATIONS_ENABLE': DONATIONS_ENABLE,
            'SUPPORT_CHAT_URL': SUPPORT_CHAT_URL,
            'CHANNEL_EXISTS': CHANNEL_EXISTS,
            'CHANNEL_URL': CHANNEL_URL,
            'SHOW_START_MENU_ONCE': SHOW_START_MENU_ONCE,
            'SUPPORT': SUPPORT,
            'CHANNEL': CHANNEL,
            'BACK': BACK,
        }
        
        _imports_cached = True
        logger.info("[LegalPolicy] –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"[LegalPolicy] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞: {e}")
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
        _import_cache = {
            'get_trial': lambda session, user_id: 0,
            'edit_or_send_message': lambda message, text, reply_markup=None, media_path=None, force_text=False: message.edit_text(text, reply_markup=reply_markup) if message else None,
            'get_about_vpn': lambda version: "üî• –û —Å–µ—Ä–≤–∏—Å–µ\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º VPN —Å–µ—Ä–≤–∏—Å–µ.",
            'DONATIONS_ENABLE': False,
            'SUPPORT_CHAT_URL': "https://t.me/support",
            'CHANNEL_EXISTS': False,
            'CHANNEL_URL': "https://t.me/channel",
            'SHOW_START_MENU_ONCE': True,
            'SUPPORT': "üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            'CHANNEL': "üì¢ –ö–∞–Ω–∞–ª",
            'BACK': "‚óÄÔ∏è –ù–∞–∑–∞–¥",
        }
        _imports_cached = True
    
    return _import_cache


def create_legal_policy_buttons():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    buttons = []
    
    if LegalPolicyConfig.USE_WEBAPP_BUTTONS:
        # –°–æ–∑–¥–∞–µ–º WebApp –∫–Ω–æ–ø–∫–∏
        terms_button = InlineKeyboardButton(
            text=LegalPolicyConfig.TERMS_BUTTON_TEXT,
            web_app=WebAppInfo(url=LegalPolicyConfig.TERMS_WEBAPP_URL)
        )
        privacy_button = InlineKeyboardButton(
            text=LegalPolicyConfig.PRIVACY_BUTTON_TEXT,
            web_app=WebAppInfo(url=LegalPolicyConfig.PRIVACY_WEBAPP_URL)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ URL –∫–Ω–æ–ø–∫–∏
        terms_button = InlineKeyboardButton(
            text=LegalPolicyConfig.TERMS_BUTTON_TEXT,
            url=LegalPolicyConfig.TERMS_OF_SERVICE_URL
        )
        privacy_button = InlineKeyboardButton(
            text=LegalPolicyConfig.PRIVACY_BUTTON_TEXT,
            url=LegalPolicyConfig.PRIVACY_POLICY_URL
        )
    
    if LegalPolicyConfig.BUTTONS_INLINE:
        # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        buttons.append([terms_button, privacy_button])
    else:
        # –ö–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        buttons.append([terms_button])
        buttons.append([privacy_button])
    
    return buttons


@router.callback_query(F.data == "about_vpn")
async def handle_about_vpn_with_legal_policy(callback: CallbackQuery, session: AsyncSession):
    """
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç callback "about_vpn" –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    logger.info("[LegalPolicy] –ü–µ—Ä–µ—Ö–≤–∞—Ç callback 'about_vpn'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
    if not LegalPolicyConfig.ENABLED:
        logger.warning("[LegalPolicy] –ú–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
        imports = _lazy_import()
        
        user_id = callback.from_user.id
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ trial —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            trial = await imports['get_trial'](session, user_id)
        except Exception as e:
            logger.warning(f"[LegalPolicy] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è trial: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            trial = 0
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ back_target
        back_target = "profile" if imports['SHOW_START_MENU_ONCE'] and trial > 0 else "start"

        kb = InlineKeyboardBuilder()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        other_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π
        if imports['DONATIONS_ENABLE']:
            other_buttons.append([InlineKeyboardButton(text="üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="donate")])

        other_buttons.append([InlineKeyboardButton(text=imports['SUPPORT'], url=imports['SUPPORT_CHAT_URL'])])
        
        if imports['CHANNEL_EXISTS']:
            other_buttons.append([InlineKeyboardButton(text=imports['CHANNEL'], url=imports['CHANNEL_URL'])])

        other_buttons.append([InlineKeyboardButton(text=imports['BACK'], callback_data=back_target)])
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        legal_buttons = create_legal_policy_buttons()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
        if LegalPolicyConfig.BUTTONS_POSITION == "top":
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            all_buttons = legal_buttons + other_buttons
        else:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –ø–æ—Ç–æ–º –ø—Ä–∞–≤–æ–≤—ã–µ
            all_buttons = other_buttons + legal_buttons
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for button_row in all_buttons:
            kb.row(*button_row)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π
        try:
            text = imports['get_about_vpn']("3.2.3-minor")
        except Exception as e:
            logger.warning(f"[LegalPolicy] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            text = "üî• –û —Å–µ—Ä–≤–∏—Å–µ\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º VPN —Å–µ—Ä–≤–∏—Å–µ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = os.path.join("img", "pic.jpg")
        image_exists = os.path.exists(image_path)
        logger.info(f"[LegalPolicy] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} {'–Ω–∞–π–¥–µ–Ω–æ' if image_exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π
        try:
            await imports['edit_or_send_message'](
                callback.message, 
                text, 
                reply_markup=kb.as_markup(), 
                media_path=image_path if image_exists else None, 
                force_text=False
            )
            logger.info("[LegalPolicy] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ edit_or_send_message")
        except Exception as e:
            logger.warning(f"[LegalPolicy] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ edit_or_send_message: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"[LegalPolicy] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: has_photo={bool(callback.message.photo)}, has_text={bool(callback.message.text)}, content_type={callback.message.content_type}")
            
            # Fallback –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if callback.message.photo:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                    logger.info("[LegalPolicy] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption —Ñ–æ—Ç–æ")
                    await callback.message.edit_caption(caption=text, reply_markup=kb.as_markup())
                elif callback.message.text:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    logger.info("[LegalPolicy] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                    await callback.message.edit_text(text, reply_markup=kb.as_markup())
                else:
                    # –ï—Å–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.info("[LegalPolicy] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    await callback.message.answer(text, reply_markup=kb.as_markup())
                    
                logger.info("[LegalPolicy] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e2:
                logger.error(f"[LegalPolicy] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
                try:
                    await callback.answer("–†–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
                    logger.info("[LegalPolicy] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω fallback –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                except Exception as e3:
                    logger.error(f"[LegalPolicy] –î–∞–∂–µ callback –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e3}")
                return
        
        logger.info("[LegalPolicy] –†–∞–∑–¥–µ–ª '–û —Å–µ—Ä–≤–∏—Å–µ' –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"[LegalPolicy] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback 'about_vpn': {e}")
        logger.exception(e)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫


async def on_startup():
    """–•—É–∫ –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è"""
    logger.info("[LegalPolicy] ========== –ú–û–î–£–õ–¨ –ü–†–ê–í–û–í–´–• –î–û–ö–£–ú–ï–ù–¢–û–í –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø ==========")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    _lazy_import()
    
    logger.info(f"[LegalPolicy] ENABLED: {LegalPolicyConfig.ENABLED}")
    logger.info(f"[LegalPolicy] TERMS_BUTTON_TEXT: {LegalPolicyConfig.TERMS_BUTTON_TEXT}")
    logger.info(f"[LegalPolicy] PRIVACY_BUTTON_TEXT: {LegalPolicyConfig.PRIVACY_BUTTON_TEXT}")
    logger.info(f"[LegalPolicy] TERMS_URL: {LegalPolicyConfig.TERMS_OF_SERVICE_URL}")
    logger.info(f"[LegalPolicy] PRIVACY_URL: {LegalPolicyConfig.PRIVACY_POLICY_URL}")
    logger.info(f"[LegalPolicy] USE_WEBAPP_BUTTONS: {LegalPolicyConfig.USE_WEBAPP_BUTTONS}")
    logger.info(f"[LegalPolicy] BUTTONS_POSITION: {LegalPolicyConfig.BUTTONS_POSITION}")
    logger.info(f"[LegalPolicy] BUTTONS_INLINE: {LegalPolicyConfig.BUTTONS_INLINE}")
    if LegalPolicyConfig.USE_WEBAPP_BUTTONS:
        logger.info(f"[LegalPolicy] TERMS_WEBAPP_URL: {LegalPolicyConfig.TERMS_WEBAPP_URL}")
        logger.info(f"[LegalPolicy] PRIVACY_WEBAPP_URL: {LegalPolicyConfig.PRIVACY_WEBAPP_URL}")
    logger.info("[LegalPolicy] ========== –ú–û–î–£–õ–¨ –ü–†–ê–í–û–í–´–• –î–û–ö–£–ú–ï–ù–¢–û–í –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù ==========")


async def on_shutdown():
    """–•—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è"""
    logger.info("[LegalPolicy] –ú–æ–¥—É–ª—å –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ
router.startup.register(on_startup)
router.shutdown.register(on_shutdown)
