import json
import re

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import CHANNEL_ID
from filters.admin import IsAdminFilter
from hooks.hooks import register_hook
from logger import logger

# –ò–∑–±–µ–≥–∞–µ–º –∏–º–ø–æ—Ä—Ç–∞ admin panel helper–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã


router = Router(name="channel_post_module")


class ChannelPostStates(StatesGroup):
    waiting_for_message = State()
    preview = State()


def parse_message_buttons(text: str) -> tuple[str, InlineKeyboardMarkup | None]:
    if "BUTTONS:" not in text:
        return text, None

    parts = text.split("BUTTONS:", 1)
    clean_text = parts[0].strip()
    buttons_text = parts[1].strip()

    if not buttons_text:
        return clean_text, None

    buttons = []
    button_lines = [line.strip() for line in buttons_text.split("\n") if line.strip()]

    for line in button_lines:
        try:
            cleaned_line = re.sub(r'<tg-emoji emoji-id="[^"]*">([^<]*)</tg-emoji>', r"\1", line)
            button_data = json.loads(cleaned_line)

            if not isinstance(button_data, dict) or "text" not in button_data:
                logger.warning(f"[ChannelPost] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: {line}")
                continue

            text_btn = button_data["text"]

            if "callback" in button_data:
                callback_data = button_data["callback"]
                if len(callback_data) > 64:
                    logger.warning(f"[ChannelPost] Callback —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {callback_data}")
                    continue
                button = InlineKeyboardButton(text=text_btn, callback_data=callback_data)
            elif "url" in button_data:
                url = button_data["url"]
                button = InlineKeyboardButton(text=text_btn, url=url)
            else:
                logger.warning(f"[ChannelPost] –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è: {line}")
                continue

            buttons.append([button])

        except json.JSONDecodeError as e:
            logger.warning(f"[ChannelPost] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–Ω–æ–ø–∫–∏: {line} - {e}")
            continue
        except Exception as e:
            logger.error(f"[ChannelPost] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {line} - {e}")
            continue

    if not buttons:
        return clean_text, None

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return clean_text, keyboard


async def admin_panel_hook(admin_role: str, **kwargs):
    from .settings import ENABLE, BUTTON_TEXT
    if not ENABLE:
        return None
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–ª–±—ç–∫–∞ –≤–º–µ—Å—Ç–æ AdminPanelCallback, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∏–º–ø–æ—Ä—Ç
    btn = InlineKeyboardButton(text=BUTTON_TEXT, callback_data="admin_panel:channel_post:1")
    return {"after": "sender", "button": btn}


@router.callback_query(F.data.startswith("admin_panel:channel_post"), IsAdminFilter())
async def handle_channel_post_entry(callback_query: CallbackQuery, state: FSMContext):
    try:
        instructions_text = (
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Telegram-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i> –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä Telegram.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ <b>—Ç–µ–∫—Å—Ç</b>\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ <b>–∫–∞—Ä—Ç–∏–Ω–∫—É</b>\n"
            "‚Ä¢ <b>–¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫—É</b>\n"
            "‚Ä¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏</b> (—Å–º. —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∂–µ)\n\n"
            "<b>üìã –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫:</b>\n"
            "<code>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>\n\n"
            "<code>BUTTONS:</code>\n"
            "<code>{\"text\": \"üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\", \"callback\": \"profile\"}</code>\n"
            "<code>{\"text\": \"‚ûï –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\", \"callback\": \"buy\"}</code>\n"
            "<code>{\"text\": \"üéÅ –ó–∞–±—Ä–∞—Ç—å –∫—É–ø–æ–Ω\", \"url\": \"https://t.me/cupons\"}</code>\n"
            "<code>{\"text\": \"üì¢ –ö–∞–Ω–∞–ª\", \"url\": \"https://t.me/channel\"}</code>"
        )
        await callback_query.message.edit_text(
            text=instructions_text,
            reply_markup=InlineKeyboardBuilder().row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel:admin:1")).as_markup(),
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug("[ChannelPost] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
        else:
            raise

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
    await state.set_state(ChannelPostStates.waiting_for_message)


@router.message(ChannelPostStates.waiting_for_message, IsAdminFilter())
async def handle_channel_post_message(message: Message, state: FSMContext):

    original_text = message.html_text or message.text or message.caption or ""
    photo = message.photo[-1].file_id if message.photo else None

    clean_text, keyboard = parse_message_buttons(original_text)

    max_len = 1024 if photo else 4096
    if len(clean_text) > max_len:
        back_kb = InlineKeyboardBuilder().row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel:admin:1")).as_markup()
        await message.answer(
            f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n–ú–∞–∫—Å–∏–º—É–º: <b>{max_len}</b> —Å–∏–º–≤–æ–ª–æ–≤, —Å–µ–π—á–∞—Å: <b>{len(clean_text)}</b>.",
            reply_markup=back_kb,
        )
        await state.clear()
        return

    await state.update_data(text=clean_text, photo=photo, keyboard=keyboard.model_dump() if keyboard else None)
    await state.set_state(ChannelPostStates.preview)

    if photo:
        await message.answer_photo(photo=photo, caption=clean_text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message.answer(text=clean_text, parse_mode="HTML", reply_markup=keyboard)

    await message.answer(
        "üëÄ –≠—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üìÆ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="channel_post_send"), InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="channel_post_cancel")]]
        ),
    )


@router.callback_query(F.data == "channel_post_send", IsAdminFilter())
async def handle_channel_post_send(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text_message = data.get("text")
    photo = data.get("photo")
    keyboard_data = data.get("keyboard")

    keyboard = None
    if keyboard_data:
        try:
            keyboard = InlineKeyboardMarkup.model_validate(keyboard_data)
        except Exception as e:
            logger.error(f"[ChannelPost] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")

    try:
        if photo:
            await callback.bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=text_message or "", parse_mode="HTML", reply_markup=keyboard)
        else:
            await callback.bot.send_message(chat_id=CHANNEL_ID, text=text_message or "", parse_mode="HTML", reply_markup=keyboard)
        await callback.message.edit_text(
            "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ.",
            reply_markup=InlineKeyboardBuilder().row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel:admin:1")).as_markup(),
        )
    except TelegramBadRequest as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        await state.clear()


@router.callback_query(F.data == "channel_post_cancel", IsAdminFilter())
async def handle_channel_post_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üö´ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardBuilder().row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel:admin:1")).as_markup(),
    )
    await state.clear()


register_hook("admin_panel", admin_panel_hook)


