import datetime

from datetime import datetime

import asyncpg

from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import web

from bot import bot
from config import BLOCK_DURATION, DATABASE_URL, SERVER_COUNTRIES, TIMESTAMP_TTL
from database import get_key_details
from handlers.buttons import MAIN_MENU
from logger import logger


last_unblock_data = {}


def get_country_from_server(server: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –¥–æ–º–µ–Ω—É.
    –ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –¥–æ–º–µ–Ω–∞ –≤ –ø–æ–ª–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö.
    """
    server_part = server.split(".")[0]

    for full_domain, country in SERVER_COUNTRIES.items():
        if server_part in full_domain:
            return country
    return server


def handle_telegram_errors(func):
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except TelegramForbiddenError:
            tg_id = kwargs.get("tg_id") or args[1]
            logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {tg_id}.")
            return False
        except TelegramBadRequest:
            tg_id = kwargs.get("tg_id") or args[1]
            logger.warning(f"üö´ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")
            return False
        except Exception as e:
            tg_id = kwargs.get("tg_id") or args[1]
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
            return False

    return wrapper


@handle_telegram_errors
async def send_notification(tg_id: int, username: str, ip: str, server: str, action: str, timestamp: str):
    country = get_country_from_server(server)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=MAIN_MENU, callback_data="profile"))

    if action == "block":
        message = (
            f"‚ö†Ô∏è <b>–ó–∞–º–µ—á–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤</b> ‚ö†Ô∏è\n\n"
            f"<b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.</b>\n\n"
            f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>"
            f"<blockquote>"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: <code>{username}</code>\n"
            f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {country}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω—ã: <b>{BLOCK_DURATION} –º–∏–Ω—É—Ç</b>"
            f"</blockquote>\n\n"
            f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b>\n"
            f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∑–∞–±—ã–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç-–∫–ª–∏–µ–Ω—Ç –∏ —Å–µ–π—á–∞—Å –∫–∞—á–∞–µ—Ç–µ –∏–ª–∏ —Ä–∞–∑–¥–∞–µ—Ç–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ VPN\n"
            f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞–∑–¥–∞—á–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞\n"
            f"‚Ä¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∏—Ç–µ —Ç–æ—Ä—Ä–µ–Ω—Ç-–∫–ª–∏–µ–Ω—Ç\n\n"
            f"‚è≥ <b>–ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–Ω–æ–≤–∞."
        )
    else:
        message = (
            f"‚úÖ <b>–î–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"<b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω—è—Ç—ã.</b>\n\n"
            f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>"
            f"<blockquote>"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: <code>{username}</code>\n"
            f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {country}"
            f"</blockquote>\n\n"
            f"üí¨ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b>\n"
            f"‚Ä¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ—Ä—Ä–µ–Ω—Ç-–∫–ª–∏–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–µ–Ω"
        )

    await bot.send_message(chat_id=tg_id, text=message, parse_mode="HTML", reply_markup=builder.as_markup())
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –æ {action} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {username}")
    return True


async def tblocker_webhook(request):
    try:
        data = await request.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç tblocker: {data}")

        username = data.get("username")
        ip = data.get("ip")
        server = data.get("server")
        action = data.get("action")
        timestamp = data.get("timestamp")

        if not all([username, ip, server, action, timestamp]):
            logger.error("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±—Ö—É–∫–µ")
            return web.json_response({"error": "Missing required fields"}, status=400)

        global last_unblock_data
        current_time = datetime.now().timestamp()

        last_unblock_data = {
            k: v for k, v in last_unblock_data.items() if current_time - v["received_at"] <= TIMESTAMP_TTL
        }

        cache_key = f"{username}:{server}"
        if action == "unblock" and cache_key in last_unblock_data:
            if timestamp == last_unblock_data[cache_key]["timestamp"]:
                return web.json_response({"status": "ok", "message": "duplicate unblock skipped"})

        if action == "unblock":
            last_unblock_data[cache_key] = {"timestamp": timestamp, "received_at": current_time}

        conn = await asyncpg.connect(DATABASE_URL)
        try:
            key_info = await get_key_details(username, conn)

            if not key_info:
                logger.error(f"–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è email {username}")
                return web.json_response({"error": "Key not found"}, status=404)

            success = await send_notification(key_info["tg_id"], username, ip, server, action, timestamp)

            if not success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {key_info['tg_id']}")

            return web.json_response({"status": "ok"})
        finally:
            await conn.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return web.json_response({"error": str(e)}, status=500)
